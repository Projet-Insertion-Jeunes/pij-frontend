'use client'

import { useState } from 'react'

interface ParcoursData {
  id: string
  letter: 'A' | 'B' | 'C' | 'D'
  title: string
  description: string
  profile: string
  duration: string
  support: string
  color: string
  icon: string
  isAssigned?: boolean
  isCompleted?: boolean
  progress?: number
}

interface EvaluationData {
  date: string
  evaluator: string
  technicalSkills: number
  employability: number
  softSkills: number
  recommendation: string
  assignedParcours: 'A' | 'B' | 'C' | 'D'
  nextSteps: string[]
}

export default function MonParcours() {
  const [selectedParcours, setSelectedParcours] = useState<ParcoursData | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)

  // Donn√©es d'√©valuation de l'utilisateur
  const evaluationData: EvaluationData = {
    date: '2024-01-15',
    evaluator: 'Comit√© d\'√©valuation R√©gional - Kindia',
    technicalSkills: 7.5,
    employability: 8.0,
    softSkills: 6.5,
    recommendation: 'Candidat avec de bonnes bases techniques mais n√©cessitant un renforcement des comp√©tences comportementales avant insertion directe.',
    assignedParcours: 'B',
    nextSteps: [
      'Formation technique compl√©mentaire en BTP (2 mois)',
      'Module savoir-√™tre professionnel (2 semaines)', 
      'Stage d\'immersion en entreprise (3 mois)',
      'Suivi post-insertion (6 mois)'
    ]
  }

  // Donn√©es des parcours
  const parcoursData: ParcoursData[] = [
    {
      id: 'parcours-a',
      letter: 'A',
      title: 'Insertion imm√©diate',
      description: 'Destin√© aux jeunes avec comp√©tences essentielles (techniques/acad√©miques) et savoir-√™tre compatible, imm√©diatement op√©rationnels.',
      profile: 'Jeunes dipl√¥m√©s de fili√®res professionnelles/universitaires ma√Ætrisant les bases, ou issus de l\'apprentissage/informel avec comp√©tences pratiques solides. Peuvent int√©grer un poste ou stage sans formation compl√©mentaire.',
      duration: 'Stage d\'immersion de 3 √† 12 mois',
      support: 'R√©f√©rent pour suivi, lien entreprise/administration. Appui financier (transport, indemnit√©) possible.',
      color: '#009460',
      icon: 'üöÄ',
      isAssigned: false,
      isCompleted: false
    },
    {
      id: 'parcours-b',
      letter: 'B',
      title: 'Mise √† niveau technique',
      description: 'Pour jeunes dont les comp√©tences sont partiellement ad√©quates, avec des lacunes techniques ou comportementales. Objectif : renforcer ces aspects via une formation courte et cibl√©e.',
      profile: 'Jeunes avec base th√©orique sans application concr√®te, ou exp√©rience pratique informelle n√©cessitant structuration. Potentiel d\'employabilit√© √† court terme avec appui compl√©mentaire.',
      duration: 'Formation courte (1 √† 3 mois) incluant modules pratiques, simulations',
      support: 'Assur√© par structures partenaires (centres de formation professionnelle, ASCAD).',
      color: '#007bff',
      icon: 'üîß',
      isAssigned: true,
      isCompleted: false,
      progress: 25
    },
    {
      id: 'parcours-c',
      letter: 'C',
      title: 'Reconversion approfondie',
      description: 'Pour les jeunes sans qualification suffisante ou √©loign√©s du march√© du travail, n√©cessitant une reconversion compl√®te.',
      profile: 'Jeunes n\'ayant pas de comp√©tences correspondant aux besoins du march√© ou des aspirations.',
      duration: 'Formation longue et certifiante (6 √† 12 mois)',
      support: 'Formation dispens√©e par centres de formation agr√©√©s avec stages pratiques et suivi intensif.',
      color: '#f57c00',
      icon: 'üéØ',
      isAssigned: false,
      isCompleted: false
    },
    {
      id: 'parcours-d',
      letter: 'D',
      title: 'Savoir-√™tre et Civique',
      description: 'Pour les jeunes n√©cessitant un renforcement des comp√©tences non techniques essentielles (soft skills, comportement professionnel, citoyennet√©).',
      profile: 'Tous les jeunes int√©grant le dispositif, ou sp√©cifiquement ceux identifi√©s par le comit√© d\'√©valuation comme ayant besoin de d√©velopper leurs comp√©tences interpersonnelles et leur compr√©hension des codes professionnels et sociaux.',
      duration: 'Modules de formation courts et interactifs (1 √† 2 semaines)',
      support: 'Ateliers pratiques, simulations, √©tudes de cas pour d√©velopper la ponctualit√©, l\'esprit d\'√©quipe, la communication, le respect des normes, etc.',
      color: '#CE1126',
      icon: 'ü§ù',
      isAssigned: false,
      isCompleted: true
    }
  ]

  const openParcoursModal = (parcours: ParcoursData) => {
    setSelectedParcours(parcours)
    setIsModalOpen(true)
  }

  const closeParcoursModal = () => {
    setIsModalOpen(false)
    setSelectedParcours(null)
  }

  const getScoreColor = (score: number) => {
    if (score >= 8) return '#009460'
    if (score >= 6) return '#FCD116'
    return '#CE1126'
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('fr-FR', { 
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    })
  }

  return (
    <div className="parcours-container">
      <div className="top-bar">
        <div className="page-title">
          <h1>üéì Mon Parcours d'Insertion</h1>
          <div className="breadcrumb">
            üè† Accueil ‚Ä∫ üéì Mon parcours ‚Ä∫ Parcours personnalis√©s Simandou 2040
          </div>
        </div>
        <div className="parcours-stats">
          <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
            <div style={{ 
              background: 'linear-gradient(45deg, #e8f5e8, #f0f9ff)', 
              padding: '10px 15px', 
              borderRadius: '8px',
              fontSize: '0.9rem'
            }}>
              <strong>Parcours {evaluationData.assignedParcours}</strong> recommand√©
            </div>
            <div style={{ 
              background: 'linear-gradient(45deg, #fef9f9, #fff9e6)', 
              padding: '10px 15px', 
              borderRadius: '8px',
              fontSize: '0.9rem'
            }}>
              <strong>1/4</strong> parcours compl√©t√©
            </div>
          </div>
        </div>
      </div>

      <div className="parcours-content">
        {/* Section √âvaluation */}
        <div className="evaluation-section">
          <div className="section-header">
            <h2>üìä Mon √âvaluation</h2>
            <div className="evaluation-date">
              √âvalu√©e le {formatDate(evaluationData.date)}
            </div>
          </div>

          <div className="evaluation-card">
            <div className="evaluation-header">
              <div className="evaluator-info">
                <h3>√âvaluation par le Comit√© Public-Priv√©</h3>
                <p>{evaluationData.evaluator}</p>
              </div>
              <div className="recommendation-badge">
                <span className="recommended-label">Parcours recommand√©</span>
                <div className="recommended-parcours">
                  <span className="parcours-letter" style={{ background: parcoursData.find(p => p.letter === evaluationData.assignedParcours)?.color }}>
                    {evaluationData.assignedParcours}
                  </span>
                  <span>{parcoursData.find(p => p.letter === evaluationData.assignedParcours)?.title}</span>
                </div>
              </div>
            </div>

            <div className="scores-grid">
              <div className="score-item">
                <div className="score-circle">
                  <svg width="80" height="80">
                    <circle cx="40" cy="40" r="30" fill="none" stroke="#e1e1e1" strokeWidth="6"></circle>
                    <circle 
                      cx="40" 
                      cy="40" 
                      r="30" 
                      fill="none" 
                      stroke={getScoreColor(evaluationData.technicalSkills)} 
                      strokeWidth="6"
                      strokeDasharray="188" 
                      strokeDashoffset={188 - (evaluationData.technicalSkills / 10) * 188}
                      transform="rotate(-90 40 40)"
                    ></circle>
                  </svg>
                  <div className="score-text">{evaluationData.technicalSkills}/10</div>
                </div>
                <div className="score-label">üîß Comp√©tences Techniques</div>
              </div>

              <div className="score-item">
                <div className="score-circle">
                  <svg width="80" height="80">
                    <circle cx="40" cy="40" r="30" fill="none" stroke="#e1e1e1" strokeWidth="6"></circle>
                    <circle 
                      cx="40" 
                      cy="40" 
                      r="30" 
                      fill="none" 
                      stroke={getScoreColor(evaluationData.employability)} 
                      strokeWidth="6"
                      strokeDasharray="188" 
                      strokeDashoffset={188 - (evaluationData.employability / 10) * 188}
                      transform="rotate(-90 40 40)"
                    ></circle>
                  </svg>
                  <div className="score-text">{evaluationData.employability}/10</div>
                </div>
                <div className="score-label">üíº Employabilit√©</div>
              </div>

              <div className="score-item">
                <div className="score-circle">
                  <svg width="80" height="80">
                    <circle cx="40" cy="40" r="30" fill="none" stroke="#e1e1e1" strokeWidth="6"></circle>
                    <circle 
                      cx="40" 
                      cy="40" 
                      r="30" 
                      fill="none" 
                      stroke={getScoreColor(evaluationData.softSkills)} 
                      strokeWidth="6"
                      strokeDasharray="188" 
                      strokeDashoffset={188 - (evaluationData.softSkills / 10) * 188}
                      transform="rotate(-90 40 40)"
                    ></circle>
                  </svg>
                  <div className="score-text">{evaluationData.softSkills}/10</div>
                </div>
                <div className="score-label">ü§ù Savoir-√™tre</div>
              </div>
            </div>

            <div className="recommendation-section">
              <h4>üìù Recommandation du comit√©</h4>
              <p>{evaluationData.recommendation}</p>
            </div>

            <div className="next-steps-section">
              <h4>üó∫Ô∏è Prochaines √©tapes recommand√©es</h4>
              <div className="steps-list">
                {evaluationData.nextSteps.map((step, index) => (
                  <div key={index} className="step-item">
                    <div className="step-number">{index + 1}</div>
                    <div className="step-content">{step}</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Section Parcours */}
        <div className="parcours-section">
          <div className="section-header">
            <h2>üõ§Ô∏è Parcours Disponibles</h2>
            <p>D√©couvrez les 4 parcours personnalis√©s du programme Simandou 2040</p>
          </div>

          <div className="parcours-grid">
            {parcoursData.map((parcours) => (
              <div 
                key={parcours.id} 
                className={`parcours-card ${parcours.isAssigned ? 'assigned' : ''} ${parcours.isCompleted ? 'completed' : ''}`}
                onClick={() => openParcoursModal(parcours)}
              >
                {parcours.isAssigned && (
                  <div className="assigned-badge">üìå Mon parcours</div>
                )}
                {parcours.isCompleted && (
                  <div className="completed-badge">‚úÖ Termin√©</div>
                )}

                <div className="parcours-header">
                  <div className="parcours-icon" style={{ background: parcours.color }}>
                    <span className="parcours-letter">{parcours.letter}</span>
                    <span className="parcours-emoji">{parcours.icon}</span>
                  </div>
                  <div className="parcours-info">
                    <h3>Parcours {parcours.letter}</h3>
                    <h4>{parcours.title}</h4>
                  </div>
                </div>

                <div className="parcours-description">
                  {parcours.description}
                </div>

                <div className="parcours-meta">
                  <div className="duration-info">
                    <span className="meta-icon">‚è±Ô∏è</span>
                    <span>{parcours.duration}</span>
                  </div>
                </div>

                {parcours.progress !== undefined && (
                  <div className="progress-section">
                    <div className="progress-label">
                      Progression : {parcours.progress}%
                    </div>
                    <div className="progress-bar-container">
                      <div 
                        className="progress-bar-fill" 
                        style={{ 
                          width: `${parcours.progress}%`,
                          background: parcours.color 
                        }}
                      ></div>
                    </div>
                  </div>
                )}

                <div className="parcours-footer">
                  <button className="btn btn-outline">
                    üëÅÔ∏è Voir d√©tails
                  </button>
                  {parcours.isAssigned && !parcours.isCompleted && (
                    <button className="btn btn-primary">
                      üìö Continuer
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Modal d√©tails du parcours */}
      {isModalOpen && selectedParcours && (
        <div className="parcours-modal-overlay" onClick={closeParcoursModal}>
          <div className="parcours-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <div className="modal-title-section">
                <div className="modal-parcours-icon" style={{ background: selectedParcours.color }}>
                  <span className="parcours-letter">{selectedParcours.letter}</span>
                  <span className="parcours-emoji">{selectedParcours.icon}</span>
                </div>
                <div>
                  <h2>Parcours {selectedParcours.letter}</h2>
                  <h3>{selectedParcours.title}</h3>
                  {selectedParcours.isAssigned && (
                    <div className="assigned-indicator">üìå Votre parcours recommand√©</div>
                  )}
                </div>
              </div>
              <button className="close-btn" onClick={closeParcoursModal}>
                ‚úï
              </button>
            </div>

            <div className="modal-content">
              <div className="modal-section">
                <h4>üìã Description</h4>
                <p>{selectedParcours.description}</p>
              </div>

              <div className="modal-section">
                <h4>üë• Profil cibl√©</h4>
                <p>{selectedParcours.profile}</p>
              </div>

              <div className="modal-section">
                <h4>‚è±Ô∏è Dur√©e</h4>
                <p>{selectedParcours.duration}</p>
              </div>

              <div className="modal-section">
                <h4>ü§ù Accompagnement</h4>
                <p>{selectedParcours.support}</p>
              </div>

              {selectedParcours.isAssigned && (
                <div className="modal-section highlight">
                  <h4>üéØ Pourquoi ce parcours vous est-il recommand√© ?</h4>
                  <p>
                    Bas√© sur votre √©valuation, ce parcours correspond parfaitement √† votre profil actuel et vous permettra 
                    de d√©velopper les comp√©tences n√©cessaires pour une insertion r√©ussie dans le projet Simandou 2040.
                  </p>
                </div>
              )}
            </div>

            <div className="modal-footer">
              <div className="modal-buttons">
                {selectedParcours.isAssigned && !selectedParcours.isCompleted && (
                  <button className="btn btn-primary">
                    üìö Commencer/Continuer
                  </button>
                )}
                <button className="btn btn-outline" onClick={closeParcoursModal}>
                  Fermer
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 